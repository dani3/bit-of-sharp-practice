@startuml

!theme reddress-lightorange
footer Game engine architecture

interface IEventListener {
    + void onEvent(Event event)
}

class Renderer {
}

class WindowProps {
    - String title
    - int width
    - int height
    + WindowProps(String title, int width, int height)
}

abstract class Window {
    {static} + Window create(WindowProps props)
    {abstract} + int getHeight()
    {abstract} + int getWidth()
    {abstract} + int onUpdate()
    {abstract} + void setVSync(boolean enabled)
    {abstract} + boolean isVSync()
    {abstract} + void addOnEventListener(IEventListener listener)
}

note left of Window
    Platform-agnostic abstract class
    that must be implemented for each OS.
end note

class LayerStack {
    - List<Layer> layers
    + LayerStack()
    + void pushLayer(Layer layer)
    + void pushOverlay(Layer overlay)
    + void popLayer(Layer layer)
    + void popOverlay(Layer overlay)
}

abstract class Layer {
    # String debugName
    + Layer()
    + Layer(String name)
    {abstract} + void OnAttach()
    {abstract} + void OnDetach()
    {abstract} + void OnUpdate(TimeStep ts)
    {abstract} + void OnEvent(Event event)
    {abstract} + boolean equals(Layer other)
}

abstract class Application implements IEventListener {
    - Window window
    - LayerStack layerStack
    + void run()
    + void pushLayer(Layer layer)
    + void pushOverlay(Layer overlay)
    - void onWindowClosed(WindowClosedEvent event)
    - void onWindowResized(WindowResizedEvent event)
}

note right of Application
    The game application must extend this class
    and implement its own logic.
end note

Application --o "1 " Window : has
Application --o "1  " LayerStack : has
Application -left-o "1 " Renderer : uses

LayerStack --o "0.. " Layer
Window --o "1 " WindowProps

@enduml
